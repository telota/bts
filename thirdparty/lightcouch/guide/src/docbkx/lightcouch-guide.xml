<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"> 
<!-- 
   Copyright (C) 2011 Ahmed Yehia (ahmed.yehia.m@gmail.com)
   
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
 -->                                
<article>
	<title>LightCouch User Guide 0.0.6</title>
	
	<articleinfo>
		<author>
			<firstname>Author: Ahmed Yehia</firstname>
		</author>
		<date>Oct 24, 2012</date>
	</articleinfo>
	
	<section id="overview">
		<title>Overview</title>
		<para> 
		LightCouch provides a Java interface for communicating with CouchDB RESTful JSON APIs.
		</para>
		<para>
		APIs in LightCouch is accessed by establishing a 'client' towards a CouchDB database server.
		A client is the main object which performs every request to the database, under it's context, such as document persistence or querying Views.
		</para>
		<para>
		The APIs focus on Documents <acronym>CRUD</acronym>, Views, Attachments, Design Documents, 
		Bulk operations, Changes notification, and database specific such as Compaction and Replication.
		</para>
		<para>
		API usage and use cases examples is covered by integration unit tests, that runs against a running database.
		<ulink url="http://www.lightcouch.org/download.html">Download</ulink>.
		</para>
        <para>
        Internally LightCouch depends on 
        <ulink url="http://hc.apache.org/httpcomponents-client-ga/index.html">Apache HttpClient</ulink> 
        for handling the HTTP communications &amp; <ulink url="http://code.google.com/p/google-gson/">Gson</ulink>
        for JSON / Java mappings.
        </para>
	</section><!-- /overview -->
	
	<section id="setup">
		<title>Setup</title>
		<para>
        <literal>Maven</literal>
		</para>
		<programlisting><![CDATA[ 
<dependency>
  <groupId>org.lightcouch</groupId>
  <artifactId>lightcouch</artifactId> 
  <version>0.0.6</version>
</dependency> 
		]]></programlisting>
		<para id="dependencies">
		Alternatively download the dependencies.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<ulink url="https://github.com/downloads/ahmedyha/LightCouch/lightcouch-0.0.6.jar">
						<citetitle>LightCouch 0.0.6</citetitle>
					</ulink>
				</para>
			</listitem>
                  <listitem>
                        <para>
                              <ulink url="http://hc.apache.org/downloads.cgi">
                                    <citetitle>HttpClient 4.2.5</citetitle>
                              </ulink>
                        </para>
                  </listitem>
			<listitem>
				<para>
					<ulink url="http://hc.apache.org/downloads.cgi">
						<citetitle>HttpCore 4.2.4</citetitle>
					</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://commons.apache.org/codec/download_codec.cgi">
						<citetitle>Commons Codec 1.6</citetitle>
					</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://commons.apache.org/logging/download_logging.cgi">
						<citetitle>Commons Logging 1.1.1</citetitle>
					</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://code.google.com/p/google-gson/downloads/list">
						<citetitle>Gson 2.2.4</citetitle>
					</ulink>
				</para>
			</listitem>
		</itemizedlist>
		</section><!-- /setup -->
		
		<section id="configure-and-use">
			<title>Configuration and Use</title>
	        <para>
	        LightCouch client, i.e. <ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/CouchDbClient.html">org.lightcouch.CouchDbClient</ulink>
            can be configured and constructed in several ways as preferred. 
            </para>
            <para>
            Configuration parameters can be supplied to a client via <literal>.properties</literal> files, or through convenient constructors.
            Typical usage is creating a file named <literal>couchdb.properties</literal> in the default classpath of your application, 
            containing the following parameters:
            </para>
			<programlisting><![CDATA[  
### Required 
couchdb.name=db-test
couchdb.createdb.if-not-exist=true 
# The protocol: http | https
couchdb.protocol=http 
couchdb.host=127.0.0.1 
# The port e.g: 5984 | 6984
couchdb.port=5984 
# Blank username/password for no login 
couchdb.username=
couchdb.password= 

### Optional/Advanced 
# Timeout to wait for a response in ms. Defaults to 0 (no timeout). 
couchdb.http.socket.timeout=
# Timeout to establish a connection in ms. Defaults to 0 (no timeout).
couchdb.http.connection.timeout=
# Max connections. 
couchdb.max.connections=100
# Connect through proxy
couchdb.proxy.host=
couchdb.proxy.port=
			]]></programlisting>
			<para>
			Next, create a client instance, using the default constructor:
			</para>
<programlisting><![CDATA[           
CouchDbClient dbClient = new CouchDbClient(); 
            ]]></programlisting>
            <para>
            <literal>CouchDbClient</literal> provides additional constructors for instantiating a client.
            One which accepts a <literal>.properties</literal> file name e.g, <literal>mycouchdb.properties</literal>,
            another that accepts individual parameters, the final uses an object with properties <ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/CouchDbProperties.html">CouchDbProperties</ulink>.
            </para>			
            <programlisting><![CDATA[ 
// couchdb-2.properties is on the classpath
CouchDbClient dbClient1 = new CouchDbClient("couchdb-2.properties");
            
CouchDbClient dbClient2 = new CouchDbClient("db-name", true, "http", "127.0.0.1", 5984, "username", "secret");

CouchDbProperties properties = new CouchDbProperties()
  .setDbName("db-name")
  .setCreateDbIfNotExist(true)
  .setProtocol("https")
  .setHost("example.com")
  .setPort(443)
  .setUsername("username")
  .setPassword("secret")
  .setMaxConnections(100)
  .setConnectionTimeout(0);

CouchDbClient dbClient3 = new CouchDbClient(properties);

// Client is ready to use
            ]]></programlisting>
		<para>
        Typically a client instance is created once per an application, and reused.
        </para>
        <para>
        Multiple client instances within an application; can be created to handle 
        multiple databases, each instance runs in isolation.
        </para>
        <para>
        After usage, it might be useful to shutdown a client's underlying connection manager, 
        for proper release of resources:
        </para>
        <programlisting><![CDATA[ 
dbClient.shutdown();
        ]]></programlisting>
        
        <section id="spring">
            <title>Spring DI</title>
            <programlisting><![CDATA[  
<bean id="dbClient" class="org.lightcouch.CouchDbClient" init-method="syncDesignDocsWithDb" destroy-method="shutdown"/> 
<bean id="dbClient2" class="org.lightcouch.CouchDbClient" init-method="syncDesignDocsWithDb" destroy-method="shutdown"> 
  <constructor-arg value="couchdb-2.properties" /> 
</bean> 
            ]]></programlisting>
            <para>
            Note, the example synchronize Design documents with the databse, after a client is created.
            </para>            
            <programlisting><![CDATA[ 
@Autowired 
private CouchDbClient dbClient;
            ]]></programlisting>
        </section> <!-- /spring -->
        </section> <!-- /configure-and-use -->

	<section id="docs-api">
		<title>Documents API</title>
		<para>
		Documents API is accessed via a client instance which acts like <literal>JPA EntityManager</literal>.
		</para>
		<para> 
        The API provides <literal>CRUD</literal> kind of operations for documents.
        </para>
		<para>
		Model classes that represent documents in CouchDB, can choose to extend
		<ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/Document.html">org.lightcouch.Document</ulink>
		for conventience.
		Plain objects need to define id and revision fields, i.e. <literal>_id</literal> &amp; <literal>_rev</literal>.
		</para>
		<para>
		Gson Mapping annotations eg. <literal>@SerializedName("_id") String id;</literal> could be used to indicate the <literal>JSON</literal> name of a field.
		Fields with <literal>null</literal> value are not serialized by defualt. 
		An instance of <literal>Gson</literal> may be obtained by a client,	for use in an application when desired. 
		</para>
		<section id="docs-api-save">
			<title>Saving/Updating Documents</title>
			<para>
			Saving / Updating Documents is handled by <literal>save(Object)</literal> and <literal>update(Object)</literal>.
			<literallayout>
			An object can be: 
			1. Plain Java Object.
			2. <literal>java.util.Map</literal>. 
			3. <literal>com.google.gson.JsonObject</literal>.
			</literallayout>
			</para>
			<para>
			Saving a new object internally is handled by <literal>HTTP PUT</literal>, 
			a case where a document must be assigned an <literal>id</literal> prior to sending to the database.
			</para>
			<para>
            If the new object does not define an <literal>id</literal>, the API will generate an
            <literal>UUID</literal> similar to database generated.
            <literal>UUID</literal>s can also by obtained from the database, 
            an example below on Databse API section.
            </para>
			<para>
			Documents can also be saved via <literal>batch(Object)</literal>.
			</para>
			<para>The Result of save or update operations returns a 
			<ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/Response.html">org.lightcouch.Response</ulink>
			object that represents the database response.
			</para>
			<programlisting><![CDATA[ 
CouchDbClient dbClient = new CouchDbClient();
Foo foo = new Foo(); 

Response response = dbClient.save(foo); 
// dbClient.save(foo);   // save, ignore response 
// dbClient.batch(foo);  // saves batch

dbClient.update(foo);

Map<String, Object> map = new HashMap<>();
map.put("_id", "doc-id");
map.put("title", "value");
dbClient.save(map);

JsonObject json = new JsonObject();
json.addProperty("_id", "doc-id");
json.add("array", new JsonArray());
dbClient.save(json); 

String jsonstr = "{\"title\":\"val\"}";
JsonObject jsonobj = dbClient.getGson().fromJson(jsonstr, JsonObject.class);
dbClient.save(jsonobj);
            ]]></programlisting>
		</section> <!-- end save/update documents -->
		
		<section id="docs-api-find">
			<title>Finding Documents</title>
			<para>
			Finding documents API is available through <literal>find()</literal>s,
			that expect the document <literal>id</literal>, or w/ <literal>rev</literal>, 
			and optional query parameters through <ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/Params.html">org.lightcouch.Params</ulink>
			</para>
			<para>
			An additional finder <literal>findAny()</literal> gives the option to get any document from the database, 
			given a <literal>URI</literal>, as string, encoding may be required. 
			</para>
			<para>
			Documents returned as:
			<literallayout>
			1. Plain Java Objects.
			2. <literal>com.google.gson.JsonObject</literal>.
			3. <literal>java.io.InputStream</literal>. 
			</literallayout>
			<literal>java.util.Map</literal>, however does not qualify as a return type.
			</para>
			<para>
			Note: Input streams need to be closed properly; to release the connection.
			</para>
			<programlisting><![CDATA[  			
Foo foo = dbClient.find(Foo.class, "doc-id"); 
foo = dbClient.find(Foo.class, "doc-id", "doc-rev"); 

foo = dbClient.find(Foo.class, "doc-id", new Params().revsInfo().localSeq()); 

boolean found = dbClient.contains("doc-id");

InputStream in = dbClient.find("doc-id"); 
// ..
in.close(); // close stream

JsonObject json = dbClient.find(JsonObject.class, "doc-id");

String baseURI = dbClient.getBaseUri().toString();
String dbURI = dbClient.getDBUri().toString();
String uri = baseURI + "_stats";
JsonObject stats = dbClient.findAny(JsonObject.class, uri);
				]]></programlisting>
		</section><!-- end find documents -->
		
		<section id="docs-api-delete">
			<title>Deleting Documents</title>
			<para>
			The API provides a <literal>remove()</literal> for deleting documents, 
			expected parameters:
			<literallayout>
            1. An object containing <literal>_id</literal> and <literal>_rev</literal>.
            2. <literal>id</literal> and <literal>revision</literal> values.
            </literallayout>
			</para>
			<programlisting><![CDATA[ 
Response response = dbClient.remove(object); 

response = dbClient.remove("doc-id", "doc-rev");
            ]]></programlisting>
		</section><!-- end delete documents -->
		
		<section id="docs-api-custom-serializer">
			<title>Custom Serializers</title>
			<para>
			Configuring a custom serializer gives the option to register classes
			<literal>Gson</literal> may not be able to handle by default, 
			eg. <literal>JodaTime</literal> <literal>DateTime</literal> class.
			</para>
			<programlisting><![CDATA[ 
GsonBuilder gsonBuilder = new GsonBuilder();

gsonBuilder.registerTypeAdapter(DateTime.class, new JsonSerializer<DateTime>() {
    public JsonElement serialize(DateTime src, Type typeOfSrc, 
    JsonSerializationContext context) {
        return new JsonPrimitive(src.toString());
    }
});
		
gsonBuilder.registerTypeAdapter(DateTime.class, new JsonDeserializer<DateTime>() {
    public DateTime deserialize(JsonElement json, Type typeOfT, 
    JsonDeserializationContext context) throws JsonParseException {
        return new DateTime(json.getAsJsonPrimitive().getAsString());
    }
});

CouchDbClient dbClient = new CouchDbClient();		
dbClient.setGsonBuilder(gsonBuilder);

// .. client is ready to use
            ]]></programlisting>
		</section><!-- end delete documents -->
	</section><!-- end docs api -->
	
	<section id="docs-api-attachments">
		<title>Attachments API</title>
		<para>
		The API supports both inline and standalone Attachments.
		</para>
	<section id="docs-api-attachment-inline">
		<title>Inline Attachments</title>
		<para>
		<ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/Attachment.html">org.lightcouch.Attachment</ulink>
		represents an inline attachment enclosed in a document. 
		</para>
		<para>
		The <literal>base64</literal> data of an attachment may be encoded utilizing  
		the included dependency on <literal>Apache Codec</literal> <literal>Base64.encodeBase64String(bytes)</literal>.
		</para>
		<para>
		Model classes that extend <ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/Document.html">org.lightcouch.Document</ulink> 
		inherit the support for inline attachments.
		</para>
		<para>
		To retrieve the <literal>base64</literal> data of an attachment, include a parameter to the <literal>find()</literal>
		</para>
		<programlisting><![CDATA[     
String data = Base64.encodeBase64String("text string".getBytes());
 
Attachment attachment = new Attachment();
attachment.setData(data);
attachment.setContentType("text/plain");
				
Bar bar = new Bar(); 
bar.addAttachment("bar.txt", attachment);
 
dbClient.save(bar);

bar = dbClient.find(Bar.class, "doc-id", new Params().attachments());
String base64Data = bar.getAttachments().get("bar.txt").getData();
	]]></programlisting>
	</section><!-- end attachments inline -->
				
	<section id="docs-api-attachment-standalone">
		<title>Standalone Attachments</title>
		<para>
		Standalone attachments could be saved to an existing, or to a new document. 
		The attachment data is provided as <literal>java.io.InputStream</literal>.
		</para>
		<programlisting><![CDATA[ 
InputStream in =  // .. init stream

// save under a new document, a generated UUID is assigned as id.
dbClient.saveAttachment(in, "photo.png", "image/png");

// save to an existing document
dbClient.saveAttachment(in, "file.pdf", "application/pdf", "doc-id", "doc-rev");

// save under a new document with the given id. 
dbClient.saveAttachment(in, "photo.jpeg", "image/jpeg", "doc-id", null);

// get attachment
InputStream in = dbClient.find("doc-id/photo.jpeg");
// ..
in.close(); // close the stream
		]]></programlisting>
	</section><!-- end attachments standalone -->
	</section> <!-- end attachments -->
	
	<section id="logging-error-handling">
		<title>Logging and Error Handling</title>
		<section id="logging">
			<title>Logging</title>
			<para>
			LightCouch logs information about API usage, such as a request URI, and the returned <literal>HTTP status code</literal>
			from the database server, such information is logged at the level <literal>INFO</literal>.
			</para>
			<para> 
			<literal>Log4j</literal> configuration:
			</para>
			<programlisting><![CDATA[ 
# LightCouch 
log4j.logger.org.lightcouch=INFO 

# Apache HttpClient 
log4j.logger.org.apache.http=ERROR 
				]]></programlisting>
		</section>
		<section id="error-handling">
			<title>Error Handling</title>
			<para>
			In the event of API call failure, an exception of a specific type is thrown to report the failure.
			</para>
			<para>
			Defined Exceptions:
			<literallayout>
			1. <literal>NoDocumentException</literal> when a requested document could not be found (or a View with no result).
			2. <literal>DocumentConflictException</literal>	when a conflict is detected during a save or update. 
			3. <literal>CouchDbException</literal> is the super class for the former two exceptions, 
			conventiently it is thrown in cases of unexcpected exceptions, such as database errors <literal>4xx</literal> or <literal>5xx</literal>.
			</literallayout>	
			</para>
		</section>
	</section> <!-- /error-handling -->
	
	<section id="views-api">
		<title>Views API</title>
		<para>
		Views API is accessible under the context <literal>view("design_name/my_view")</literal>.
		</para>
		<para>
		Views can be queried in a number of ways:
		<literallayout>
		1. <literal><![CDATA[List<T>]]></literal> A list of specified type.
		2. Scalar values, <literal>int</literal>, <literal>boolean</literal> etc.
		3. View entries, key/value pairs as stored in the Database B-Tree.
		4. <literal>java.io.InputStream</literal>.
		5. Pagination.
		</literallayout>
		</para>
		<programlisting><![CDATA[ 
// List<T>
List<Foo> list = dbClient.view("example/foo")
.includeDocs(true)
.startKey("start-key")
.endKey("end-key")
.limit(10)
.query(Foo.class);

// primitive types
int count = dbClient.view("example/by_tag").key("couchdb").queryForInt(); 

// View entries (keys/values), with Documents 
View view = dbClient.view("example/by_date")
.key(2011, 10, 15) // complex key as: values, or array
.reduce(false) 
.includeDocs(true); 

ViewResult<int[], String, Foo> entries = 
             view.queryView(int[].class, String.class, Foo.class); 
		]]></programlisting>
		<section id="special-views">
            <title>Special Views</title>
            <para>
            Views API extends to support special Views such as <literal>_all_docs</literal> &amp; <literal>_temp_view</literal>. 
            </para>
            <para>
            Temporary Views functions may be be defined in local <literal>.js</literal> files; saved in the application classpath,
            or through <ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/DesignDocument.MapReduce.html">MapReduce</ulink> object.
            </para>
        <programlisting><![CDATA[             
// _all_docs 
List<JsonObject> allDocs = dbClient.view("_all_docs").query(JsonObject.class);

// _temp_view
List<Foo> list = dbClient.view("_temp_view")
.tempView("temp_1")
// .tempView(mapRedObj) 
.includeDocs(true)
.reduce(false)
.query(Foo.class);
        ]]></programlisting>
        <para>
        Temp views directory structure.
        </para>
        <programlisting><![CDATA[
temp-views
    |- temp_1
        |- map.js
        |- reduce.js   
    |- temp_2
        |- map.js  
    |- ...
        ]]></programlisting>                     
        </section><!-- /special-views -->    
		<section id="pagination">
			<title>Pagination</title>
			<para>
			Paging over a View results is offered by an API that features <literal>previous &amp; next</literal> navigation model. 
			</para>
			<para>
			A View page is respresented by <ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/Page.html"><![CDATA[Page<T>]]></ulink>
			</para>
			<para>
			Usage example in web application.
			</para>
			<programlisting><![CDATA[ 	
// Servlet 

public void doGet(HttpServletRequest request, HttpServletResponse response) { 

String param = request.getParameter("param"); 
int resultsPerPage = 15;

// null param gets the first page
Page<Foo> page = dbClient.view("example/foo").reduce(false).queryPage(resultsPerPage, param, Foo.class); 

request.setAttribute("page", page);

// .. forward to a JSP for display
} 
			]]></programlisting>
			
			<programlisting><![CDATA[ 
<%-- JSP --%>
			
<%-- iterate over documents --%>		
<c:forEach items="${page.resultList}" var="foo"> 
  <p>${foo.title}
</c:forEach> 

<%-- show paging status --%>
<p>Showing:  ${page.resultFrom} - ${page.resultTo} of total ${page.totalResults} 

<%-- handle navigation --%>
<p>
<c:choose> 
  <c:when test="${page.hasPrevious}"> 
  <a href="/getpage?param=${page.previousParam}"> Previous </a>
  </c:when> 
  <c:otherwise> Previous </c:otherwise>
</c:choose>  

${page.pageNumber} 
 
<c:choose> 
  <c:when test="${page.hasNext}"> 
  <a href="/getpage?param=${page.nextParam}"> Next </a> 
  </c:when>
  <c:otherwise> Next </c:otherwise> 
</c:choose> 
			]]></programlisting>
	            </section><!-- /pagination -->
	</section><!-- /views-api -->
	
	<section id="bulk-docs">
		<title>Bulk Documents</title>
		<para>
		Bulk documents API performs two operations: Modify &amp; Fetch for bulk documents.
		</para>
		<programlisting><![CDATA[ 
// Modify
List<Object> newDocs = new ArrayList<Object>();
newDocs.add(new Foo());
newDocs.add(new JsonObject());
boolean allOrNothing = true;
List<Response> bulkResponse = dbClient.bulk(newDocs, allOrNothing);

// Fetch
List<String> keys = Arrays.asList(new String[]{"doc-id-1", "doc-id-2"});
List<Foo> docs = dbClient.view("_all_docs")
.includeDocs(true)
.keys(keys)
.query(Foo.class);
		]]></programlisting>
	</section> <!-- /bulk-docs -->
	
	<section id="design-docs">
		<title>Design Documents</title>
		<para>
		The API for Design Documents is accessible under the context <literal>design()</literal>.
		</para>
		<para>
		A Design Document is represented by
		<ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/DesignDocument.html">org.lightcouch.DesignDocument</ulink>.
		Design Documents may be maintained on local <literal>.js</literal> files; saved in an application classpath.
		</para>
		<para>
        An API is provides a kind of <literal>synchronization</literal> to copy from local files to the database.
        <ulink url="http://www.lightcouch.org/javadocs/org/lightcouch/CouchDbDesign.html">org.lightcouch.CouchDbDesign</ulink> 
        lists all the supported operations.
        </para>
        <para>
        An example design document can be found under the test package of the source code. 
        </para>
		<para>
		Design documents directory structure:
		</para>
		<programlisting><![CDATA[ 
design-docs
    |- example
        |- filters
            |- filter1.js
            |- ..
        |- lists
            |- list1.js  
            |- ..  
        |- shows    
            |- show1.js
            |- ..
        |- updates    
            |- update1.js
            |- ..
        |- validate_doc_update
            |- validate.js 
        |- views
            |- by_date
                |- map.js
            |- by_tag
                |- map.js
                |- reduce.js            
    |- example2
        ...
		]]></programlisting>
		<programlisting><![CDATA[ 
// find by dir name
DesignDocument designDoc = dbClient.design().getFromDesk("example");  

dbClient.design().synchronizeWithDb(designDoc); 

// find from Db
DesignDocument designDocFromDb = dbClient.design().getFromDb("_design/example"); 

// synchronize all
dbClient.design().synchronizeAllWithDb();
// dbClient.syncDesignDocsWithDb(); // or use a client
		]]></programlisting>
	</section> <!-- /design-docs -->
	
	<section id="changes">
		<title>Change Notifications</title>
		<para>Change notifications API is accessible under the context 
		<acronym>changes()</acronym>. The API supports Changes feed of both types 
		<acronym>normal</acronym> and <acronym>continuous</acronym>. 
		A Row in the Changes feed is returned as <acronym>com.google.gson.JsonObject</acronym>
		</para>
		<programlisting><![CDATA[
// get latest update seq
CouchDbInfo dbInfo = dbClient.context().info();
String since = dbInfo.getUpdateSeq(); 
		
// feed type normal
ChangesResult changes = dbClient.changes()
  .includeDocs(true)
  .limit(20)
  .since(since)
  .getChanges();

List<ChangesResult.Row> rows = changes.getResults();

for (ChangesResult.Row row : rows) {
 String docId = row.getId()
 JsonObject doc = row.getDoc();
}

// feed type continuous
Changes changes = dbClient.changes()
  .includeDocs(true)
  .since(since)
  .heartBeat(30000)
  .filter("example/filter")
  .continuousChanges();

// live access to continuous feeds
while (changes.hasNext()) { 
  ChangesResult.Row feed = changes.next();
  String docId = feed.getId();
  JsonObject doc = feed.getDoc();
	
  // changes.stop(); // stop the running feed
}
		]]></programlisting>
	</section> <!-- /changes -->
	
    <section id="update-handlers">
        <title>Update Handlers</title>
        <para>Update handlers can be invoked by a client by calling <acronym>invokeUpdateHandler()</acronym>.
        </para>
        <programlisting><![CDATA[
String query  = "field=title&value=new value";     

String output = dbClient.invokeUpdateHandler("example_design/example_update", "doc-id", query);
        ]]></programlisting>
    </section> <!-- /update-handlers -->	
	
	<section id="db-api">
		<title>Database API</title>
		<para>
		Database specific APIs is accessible under the context <literal>context()</literal>.
		</para>
		<programlisting><![CDATA[ 		
CouchDbInfo dbInfo = dbClient.context().info();
 
String version = dbClient.context().serverVersion(); 

dbClient.context().compact();

dbClient.context().ensureFullCommit(); 

dbClient.context().createDB("new-db");
		]]></programlisting>
		<section id="replication">
			<title>Replication</title>
			<para>
			Replication is handled by two sets of API, one that replicate by POSTing to
			<literal>_replicate</literal> URI, and the newer replicator database
			(i.e <literal>_replicator</literal>) introduced with CouchDB <literal>1.1.0</literal> .
			</para>
			<programlisting><![CDATA[ 
// query params for filtered replication						
Map<String, Object> queryParams = new HashMap<>();
queryParams.put("key1", "val");
// String queryParams = "{\"key1\":\"val\"}";
        			
// normal replication			
ReplicationResult result = dbClient.replication()
.source("source-db")
.target("http://user:secret@127.0.0.1:5984/target-db") 
.createTarget(true)
.sinceSeq(100) // as of CouchDB 1.2
// .cancel()   // cancel a replication
.filter("example/filter1")
.queryParams(queryParams);
.trigger();

List<ReplicationHistory> histories = result.getHistories();

// _replicator database 
Replicator replicator = dbClient.replicator() 
.source("source-db")
.target("target-db")
.continuous(true) 
.createTarget(true) 
.sinceSeq(100)                 // as of CouchDB 1.2
.replicatorDB("replicator_2")  // optional, defaults to _replicator
.replicatorDocId("doc-id")     // optional, defaults to UUID
.filter("example/filter1")
.queryParams(queryParams)
.userCtxName("user")           // for delegated requests
.userCtxRoles("admin", "manager");

Response response = replicator.save(); // triggers a replication

ReplicatorDocument findDocument = dbClient.replicator()
.replicatorDocId("doc-id")
.find(); 

List<ReplicatorDocument> docs = dbClient.replicator().findAll(); 

Response removeResponse = dbClient.replicator() 
.replicatorDocId("doc-id")
.replicatorDocRev("doc-rev")
.remove(); // cancels an ongoing replication
			]]></programlisting>
		</section><!-- /replication -->
	</section> <!-- /db-api -->
</article>