/*
 */
package Btsaux.provider;

import Btsaux.util.BtsauxAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class BtsauxItemProviderAdapterFactory extends BtsauxAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<>();
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.AugroupsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected AugroupsTypeItemProvider augroupsTypeItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.AuthorizationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected AuthorizationTypeItemProvider authorizationTypeItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.AuthorsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected AuthorsTypeItemProvider authorsTypeItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.BwlenglType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected BwlenglTypeItemProvider bwlenglTypeItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.BwllinkType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected BwllinkTypeItemProvider bwllinkTypeItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.BwllistType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected BwllistTypeItemProvider bwllistTypeItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.StupidXMLType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected StupidXMLTypeItemProvider stupidXMLTypeItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link Btsaux.ThsdataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected ThsdataTypeItemProvider thsdataTypeItemProvider;

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    public BtsauxItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This creates an adapter for a {@link Btsaux.AugroupsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createAugroupsTypeAdapter() {
        if (augroupsTypeItemProvider == null) {
            augroupsTypeItemProvider = new AugroupsTypeItemProvider(this);
        }

        return augroupsTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.AuthorizationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createAuthorizationTypeAdapter() {
        if (authorizationTypeItemProvider == null) {
            authorizationTypeItemProvider = new AuthorizationTypeItemProvider(this);
        }

        return authorizationTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.AuthorsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createAuthorsTypeAdapter() {
        if (authorsTypeItemProvider == null) {
            authorsTypeItemProvider = new AuthorsTypeItemProvider(this);
        }

        return authorsTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.BwlenglType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createBwlenglTypeAdapter() {
        if (bwlenglTypeItemProvider == null) {
            bwlenglTypeItemProvider = new BwlenglTypeItemProvider(this);
        }

        return bwlenglTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.BwllinkType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createBwllinkTypeAdapter() {
        if (bwllinkTypeItemProvider == null) {
            bwllinkTypeItemProvider = new BwllinkTypeItemProvider(this);
        }

        return bwllinkTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.BwllistType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createBwllistTypeAdapter() {
        if (bwllistTypeItemProvider == null) {
            bwllistTypeItemProvider = new BwllistTypeItemProvider(this);
        }

        return bwllistTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.StupidXMLType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createStupidXMLTypeAdapter() {
        if (stupidXMLTypeItemProvider == null) {
            stupidXMLTypeItemProvider = new StupidXMLTypeItemProvider(this);
        }

        return stupidXMLTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link Btsaux.ThsdataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createThsdataTypeAdapter() {
        if (thsdataTypeItemProvider == null) {
            thsdataTypeItemProvider = new ThsdataTypeItemProvider(this);
        }

        return thsdataTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    public void dispose() {
        if (augroupsTypeItemProvider != null) augroupsTypeItemProvider.dispose();
        if (authorizationTypeItemProvider != null) authorizationTypeItemProvider.dispose();
        if (authorsTypeItemProvider != null) authorsTypeItemProvider.dispose();
        if (bwlenglTypeItemProvider != null) bwlenglTypeItemProvider.dispose();
        if (bwllinkTypeItemProvider != null) bwllinkTypeItemProvider.dispose();
        if (bwllistTypeItemProvider != null) bwllistTypeItemProvider.dispose();
        if (documentRootItemProvider != null) documentRootItemProvider.dispose();
        if (stupidXMLTypeItemProvider != null) stupidXMLTypeItemProvider.dispose();
        if (thsdataTypeItemProvider != null) thsdataTypeItemProvider.dispose();
    }

}
