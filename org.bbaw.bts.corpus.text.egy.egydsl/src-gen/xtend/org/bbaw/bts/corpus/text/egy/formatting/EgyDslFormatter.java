/**
 * generated by Xtext
 */
package org.bbaw.bts.corpus.text.egy.formatting;

import com.google.inject.Inject;
import java.util.List;
import org.bbaw.bts.corpus.text.egy.services.EgyDslGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class EgyDslFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private EgyDslGrammarAccess f;
  
  protected void configureFormatting(final FormattingConfig c) {
    c.setAutoLinewrap(70);
    FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
    _setNoSpace.getRight();
    FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
    _setNoSpace_1.getSpace();
    FormattingConfig.NoSpaceLocator _setNoSpace_2 = c.setNoSpace();
    _setNoSpace_2.getLeft();
    FormattingConfig.NoSpaceLocator _setNoSpace_3 = c.setNoSpace();
    TerminalRule _eGYSTRINGRule = this.f.getEGYSTRINGRule();
    _setNoSpace_3.after(_eGYSTRINGRule);
    FormattingConfig.NoSpaceLocator _setNoSpace_4 = c.setNoSpace();
    TerminalRule _eGYSTRINGRule_1 = this.f.getEGYSTRINGRule();
    _setNoSpace_4.before(_eGYSTRINGRule_1);
    FormattingConfig.NoSpaceLocator _setNoSpace_5 = c.setNoSpace();
    ParserRule _abstractMarkerRule = this.f.getAbstractMarkerRule();
    _setNoSpace_5.around(_abstractMarkerRule);
    FormattingConfig.NoSpaceLocator _setNoSpace_6 = c.setNoSpace();
    ParserRule _ambivalenceRule = this.f.getAmbivalenceRule();
    _setNoSpace_6.around(_ambivalenceRule);
    FormattingConfig.NoSpaceLocator _setNoSpace_7 = c.setNoSpace();
    ParserRule _caseRule = this.f.getCaseRule();
    _setNoSpace_7.around(_caseRule);
    FormattingConfig.NoSpaceLocator _setNoSpace_8 = c.setNoSpace();
    ParserRule _bracketsRule = this.f.getBracketsRule();
    _setNoSpace_8.after(_bracketsRule);
    List<Keyword> _findKeywords = this.f.findKeywords("%", "#", "?");
    for (final Keyword k : _findKeywords) {
      FormattingConfig.NoSpaceLocator _setNoSpace_9 = c.setNoSpace();
      _setNoSpace_9.around(k);
    }
    List<Keyword> _findKeywords_1 = this.f.findKeywords("@", "§");
    for (final Keyword k_1 : _findKeywords_1) {
      FormattingConfig.NoSpaceLocator _setNoSpace_10 = c.setNoSpace();
      _setNoSpace_10.before(k_1);
    }
    List<Keyword> _findKeywords_2 = this.f.findKeywords("(", "((", "{", "[", "<", "⸢", "-", ".", ";", "≡", "⋮", "case");
    for (final Keyword k_2 : _findKeywords_2) {
      FormattingConfig.NoSpaceLocator _setNoSpace_11 = c.setNoSpace();
      _setNoSpace_11.after(k_2);
    }
  }
}
